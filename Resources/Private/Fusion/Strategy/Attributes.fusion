prototype(Carbon.FileLoader:Strategy.Attributes) < prototype(Neos.Fusion:Component) {
    // Returns DataStructure (attributes) to load files from the packages

    /// string The Package to load the file from
    package = null

    /// string | string[] (comma separated string) or array of file paths / filenames to load
    js = false
    css = false
    mjs = false

    /// bool Whether to use the cache or not
    useCache = true

    /// bool Output some debug information in the console
    debug = ${Configuration.setting('Carbon.FileLoader.debug')}

    /// bool Entry points to turn off the automatic inclusion of files
    neverIncludeJS = false
    neverIncludeCSS = false
    neverIncludeMJS = false

     /// 'defer' | 'async' | null Load the scripts with defer or async attribute
    scriptExecution = 'defer'

    /// string Fire event when files are loaded
    eventOnLoad = null

    /// string Folders to load the files from
    jsFolder = 'Scripts/'
    mjsFolder = 'Modules/'
    cssFolder = 'Styles/'

    // Solve this with @private as soon the minimum version is Neos 8.3
    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        _js = Carbon.FileLoader:Helper.FileItems {
            @if.set = ${!props.neverIncludeJS}
            items = ${props.js}
            package = ${props.package}
            folder = ${props.jsFolder}
            glue = ','
        }
        _mjs = Carbon.FileLoader:Helper.FileItems {
            @if.set = ${!props.neverIncludeMJS}
            items = ${props.mjs}
            package = ${props.package}
            folder = ${props.mjsFolder}
            glue = ','
        }
        _css = Carbon.FileLoader:Helper.FileItems {
            @if.set = ${!props.neverIncludeCSS}
            items = ${props.css}
            package = ${props.package}
            folder = ${props.cssFolder}
            glue = ','
        }

        renderer = Neos.Fusion:DataStructure {
            @if.set = ${this['data-loader']}
            data-loader = ${!!(props._js || props._css || props._mjs) ? (props.scriptExecution ? props.scriptExecution : true) : null}
            data-event-on-load = ${props.eventOnLoad}
            data-no-cache = true
            data-no-cache.@if.set = ${!props.useCache}
            data-debug = true
            data-debug.@if.set = ${props.debug}
            data-js = ${props._js}
            data-js.@if.set = ${props._js}
            data-mjs = ${props._mjs}
            data-mjs.@if.set = ${props._mjs}
            data-css = ${props._css}
            data-css.@if.set = ${props._css}
        }
    }
}
